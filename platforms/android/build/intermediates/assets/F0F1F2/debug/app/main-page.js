"use strict";
var main_view_model_1 = require("./main-view-model");
var geolocation = require("nativescript-geolocation");
var lat, long;
function pageLoaded(args) {
    if (!geolocation.isEnabled()) {
        geolocation.enableLocationRequest();
    }
    console.log(args.object);
    var page = args.object;
    page.bindingContext = new main_view_model_1.Demo();
    var architectView = page.getViewById("architectView");
    console.log('pageLoaded');
}
exports.pageLoaded = pageLoaded;
function urlLoaded(eventData) {
    console.log(eventData.url);
    console.log('url loaded');
    geolocation.watchLocation(function (loc) {
        if (loc) {
            lat = loc.latitude;
            long = loc.longitude;
            console.log("Received location: " + loc.latitude, loc.longitude);
        }
    }, function (e) {
        console.log("Error: " + e.message);
    }, { desiredAccuracy: 3, updateDistance: 10, minimumUpdateTime: 1000 * 20 }); // Should update every 20 seconds according to Googe documentation. Not verified.
}
exports.urlLoaded = urlLoaded;
;
function urlLoadError(eventData) {
    console.dump(eventData.error);
    console.log('url failed');
}
exports.urlLoadError = urlLoadError;
;
function urlInvoked(eventData) {
    console.log('url invoked');
}
exports.urlInvoked = urlInvoked;
;
function passLocation(data) {
    var location = "kkk";
    //  (lat, long, 0)
}
exports.passLocation = passLocation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxxREFBeUM7QUFJekMsc0RBQXlEO0FBRXpELElBQUksR0FBRyxFQUFDLElBQUksQ0FBQztBQUNiLG9CQUFvQixJQUFJO0lBQ3JCLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQixXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEIsSUFBSSxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUM3QixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksc0JBQUksRUFBRSxDQUFDO0lBQ2pDLElBQUksYUFBYSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQU0sZUFBZSxDQUFDLENBQUM7SUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUk1QixDQUFDO0FBQ0QsT0FBTyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFFaEMsbUJBQTBCLFNBQVM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUUxQixXQUFXLENBQUMsYUFBYSxDQUN2QixVQUFVLEdBQUc7UUFDVCxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ1IsR0FBRyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUE7WUFDbEIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxTQUFTLENBQUE7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLENBQUMsUUFBUSxFQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNwRSxDQUFDO0lBQ0wsQ0FBQyxFQUNELFVBQVMsQ0FBQztRQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2QyxDQUFDLEVBQ0QsRUFBQyxlQUFlLEVBQUUsQ0FBQyxFQUFFLGNBQWMsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLEVBQUcsSUFBSSxHQUFHLEVBQUUsRUFBQyxDQUFDLENBQUMsQ0FBQyxpRkFBaUY7QUFFL0osQ0FBQztBQWpCRCw4QkFpQkM7QUFBQSxDQUFDO0FBRUYsc0JBQTZCLFNBQVM7SUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUMzQixDQUFDO0FBSEQsb0NBR0M7QUFBQSxDQUFDO0FBRUYsb0JBQTJCLFNBQVM7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM1QixDQUFDO0FBRkQsZ0NBRUM7QUFBQSxDQUFDO0FBRUYsc0JBQTZCLElBQUk7SUFDL0IsSUFBSSxRQUFRLEdBQUcsS0FBSyxDQUFBO0lBQ3RCLGtCQUFrQjtBQUNsQixDQUFDO0FBSEQsb0NBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBhcHAgZnJvbSAnYXBwbGljYXRpb24nO1xuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICdjb2xvcic7XG5pbXBvcnQgKiBhcyBwbGF0Zm9ybSBmcm9tICdwbGF0Zm9ybSc7XG5pbXBvcnQgeyBEZW1vIH0gZnJvbSBcIi4vbWFpbi12aWV3LW1vZGVsXCI7XG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xuaW1wb3J0IHsgQXJjaGl0ZWN0VmlldyB9IGZyb20gJ25hdGl2ZXNjcmlwdC13aWtpdHVkZWFyY2hpdGVjdHZpZXcnXG5pbXBvcnQgKiBhcyBmcmFtZU1vZHVsZSBmcm9tICd1aS9mcmFtZSdcbmltcG9ydCBnZW9sb2NhdGlvbiA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtZ2VvbG9jYXRpb25cIik7XG5cbnZhciBsYXQsbG9uZztcbmZ1bmN0aW9uIHBhZ2VMb2FkZWQoYXJncykge1xuICAgaWYgKCFnZW9sb2NhdGlvbi5pc0VuYWJsZWQoKSkge1xuICAgICAgICBnZW9sb2NhdGlvbi5lbmFibGVMb2NhdGlvblJlcXVlc3QoKTtcbiAgICB9XG5cbiAgY29uc29sZS5sb2coYXJncy5vYmplY3QpXG4gIHZhciBwYWdlID0gPFZpZXc+YXJncy5vYmplY3Q7XG4gIHBhZ2UuYmluZGluZ0NvbnRleHQgPSBuZXcgRGVtbygpO1xuICB2YXIgYXJjaGl0ZWN0VmlldyA9IHBhZ2UuZ2V0Vmlld0J5SWQ8YW55PihcImFyY2hpdGVjdFZpZXdcIik7XG4gIGNvbnNvbGUubG9nKCdwYWdlTG9hZGVkJyk7XG5cblxuXG59XG5leHBvcnRzLnBhZ2VMb2FkZWQgPSBwYWdlTG9hZGVkO1xuXG5leHBvcnQgZnVuY3Rpb24gdXJsTG9hZGVkKGV2ZW50RGF0YSl7XG4gIGNvbnNvbGUubG9nKGV2ZW50RGF0YS51cmwpO1xuICBjb25zb2xlLmxvZygndXJsIGxvYWRlZCcpO1xuXG4gIGdlb2xvY2F0aW9uLndhdGNoTG9jYXRpb24oXG4gICAgZnVuY3Rpb24gKGxvYykge1xuICAgICAgICBpZiAobG9jKSB7XG4gICAgICAgICAgbGF0ID0gbG9jLmxhdGl0dWRlIFxuICAgICAgICAgIGxvbmcgPSBsb2MubG9uZ2l0dWRlXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlJlY2VpdmVkIGxvY2F0aW9uOiBcIiArIGxvYy5sYXRpdHVkZSxsb2MubG9uZ2l0dWRlKTtcbiAgICAgICAgfVxuICAgIH0sIFxuICAgIGZ1bmN0aW9uKGUpe1xuICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yOiBcIiArIGUubWVzc2FnZSk7XG4gICAgfSwgXG4gICAge2Rlc2lyZWRBY2N1cmFjeTogMywgdXBkYXRlRGlzdGFuY2U6IDEwLCBtaW5pbXVtVXBkYXRlVGltZSA6IDEwMDAgKiAyMH0pOyAvLyBTaG91bGQgdXBkYXRlIGV2ZXJ5IDIwIHNlY29uZHMgYWNjb3JkaW5nIHRvIEdvb2dlIGRvY3VtZW50YXRpb24uIE5vdCB2ZXJpZmllZC5cblxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVybExvYWRFcnJvcihldmVudERhdGEpIHtcbiAgY29uc29sZS5kdW1wKGV2ZW50RGF0YS5lcnJvcik7XG4gIGNvbnNvbGUubG9nKCd1cmwgZmFpbGVkJylcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxJbnZva2VkKGV2ZW50RGF0YSl7XG4gIGNvbnNvbGUubG9nKCd1cmwgaW52b2tlZCcpXG59O1xuIFxuZXhwb3J0IGZ1bmN0aW9uIHBhc3NMb2NhdGlvbihkYXRhKSB7XG4gIHZhciBsb2NhdGlvbiA9IFwia2trXCJcbi8vICAobGF0LCBsb25nLCAwKVxufVxuIl19