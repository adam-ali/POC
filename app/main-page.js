"use strict";
var main_view_model_1 = require("./main-view-model");
var geolocation = require("nativescript-geolocation");
var lat, lon, alt, architectView, AR;
function pageLoaded(args) {
    var page = args.object;
    if (!geolocation.isEnabled()) {
        geolocation.enableLocationRequest();
    }
    console.log(args.object);
    page.bindingContext = new main_view_model_1.Demo();
    architectView = page.getViewById("architectView");
    console.log('pageLoaded');
}
exports.pageLoaded = pageLoaded;
function urlLoaded(eventData) {
    console.log('url loaded: ' + eventData.url);
    geolocation.watchLocation(function (loc) {
        if (loc) {
            lat = loc.latitude;
            lon = loc.longitude;
            alt = loc.altitude;
            // console.dump(architectView);
            architectView._android.setLocation(lat, lon, .5);
            // architectView.callJavaScript(`custom(${lat}, ${lon}, ${alt})`);
            console.log("Received location: " + lat, lon);
        }
    }, function (e) {
        console.log("Error: " + e.message);
    }, { desiredAccuracy: 1, updateDistance: 10, minimumUpdateTime: 1000 }); // Should update every 20 seconds according to Googe documentation. Not verified.
}
exports.urlLoaded = urlLoaded;
;
function urlLoadError(eventData) {
    console.dump(eventData.error);
    console.log('url failed');
}
exports.urlLoadError = urlLoadError;
;
function urlInvoked(eventData) {
    console.log('url invoked');
}
exports.urlInvoked = urlInvoked;
;
function passLocation(data) {
}
exports.passLocation = passLocation;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi1wYWdlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWFpbi1wYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxxREFBeUM7QUFJekMsc0RBQXlEO0FBT3pELElBQUksR0FBRyxFQUFDLEdBQUcsRUFBQyxHQUFHLEVBQUMsYUFBYSxFQUFFLEVBQUUsQ0FBQztBQUNsQyxvQkFBb0IsSUFBSTtJQUN0QixJQUFJLElBQUksR0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBRTVCLEVBQUUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxQixXQUFXLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBRUgsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUE7SUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHNCQUFJLEVBQUUsQ0FBQztJQUNqQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBZ0IsZUFBZSxDQUFDLENBQUM7SUFDakUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBQ0QsT0FBTyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFFaEMsbUJBQTBCLFNBQVM7SUFDakMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEdBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBRTNDLFdBQVcsQ0FBQyxhQUFhLENBQ3ZCLFVBQVUsR0FBRztRQUNULEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDUixHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTtZQUNsQixHQUFHLEdBQUcsR0FBRyxDQUFDLFNBQVMsQ0FBQTtZQUNuQixHQUFHLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQTtZQUNsQiwrQkFBK0I7WUFDL0IsYUFBYSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNqRCxrRUFBa0U7WUFDaEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsR0FBRyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDbEQsQ0FBQztJQUNMLENBQUMsRUFDRCxVQUFTLENBQUM7UUFDTixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDdkMsQ0FBQyxFQUNELEVBQUMsZUFBZSxFQUFFLENBQUMsRUFBRSxjQUFjLEVBQUUsRUFBRSxFQUFFLGlCQUFpQixFQUFHLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxpRkFBaUY7QUFFMUosQ0FBQztBQXBCRCw4QkFvQkM7QUFBQSxDQUFDO0FBRUYsc0JBQTZCLFNBQVM7SUFDcEMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUMzQixDQUFDO0FBSEQsb0NBR0M7QUFBQSxDQUFDO0FBRUYsb0JBQTJCLFNBQVM7SUFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQTtBQUM1QixDQUFDO0FBRkQsZ0NBRUM7QUFBQSxDQUFDO0FBRUYsc0JBQTZCLElBQUk7QUFFakMsQ0FBQztBQUZELG9DQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgYXBwIGZyb20gJ2FwcGxpY2F0aW9uJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnY29sb3InO1xuaW1wb3J0ICogYXMgcGxhdGZvcm0gZnJvbSAncGxhdGZvcm0nO1xuaW1wb3J0IHsgRGVtbyB9IGZyb20gXCIuL21haW4tdmlldy1tb2RlbFwiO1xuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcbmltcG9ydCB7IEFyY2hpdGVjdFZpZXcgfSBmcm9tICduYXRpdmVzY3JpcHQtd2lraXR1ZGVhcmNoaXRlY3R2aWV3JztcbmltcG9ydCAqIGFzIGZyYW1lTW9kdWxlIGZyb20gJ3VpL2ZyYW1lJ1xuaW1wb3J0IGdlb2xvY2F0aW9uID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1nZW9sb2NhdGlvblwiKTtcblxuLy8gaW1wb3J0IHsgV2lraXR1ZGVWaWV3IH0gZnJvbSAnLi93aWtpdHVkZSc7XG5cblxuZGVjbGFyZSB2YXIgY29tIDogYW55O1xuXG52YXIgbGF0LGxvbixhbHQsYXJjaGl0ZWN0VmlldywgQVI7XG5mdW5jdGlvbiBwYWdlTG9hZGVkKGFyZ3MpIHtcbiAgdmFyIHBhZ2UgPSA8Vmlldz5hcmdzLm9iamVjdDtcbiAgXG4gICBpZiAoIWdlb2xvY2F0aW9uLmlzRW5hYmxlZCgpKSB7XG4gICAgICAgIGdlb2xvY2F0aW9uLmVuYWJsZUxvY2F0aW9uUmVxdWVzdCgpO1xuICAgIH1cblxuICBjb25zb2xlLmxvZyhhcmdzLm9iamVjdClcbiAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBEZW1vKCk7XG4gIGFyY2hpdGVjdFZpZXcgPSBwYWdlLmdldFZpZXdCeUlkPEFyY2hpdGVjdFZpZXc+KFwiYXJjaGl0ZWN0Vmlld1wiKTtcbiAgY29uc29sZS5sb2coJ3BhZ2VMb2FkZWQnKTtcbn1cbmV4cG9ydHMucGFnZUxvYWRlZCA9IHBhZ2VMb2FkZWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1cmxMb2FkZWQoZXZlbnREYXRhKXtcbiAgY29uc29sZS5sb2coJ3VybCBsb2FkZWQ6ICcrIGV2ZW50RGF0YS51cmwpO1xuXG4gIGdlb2xvY2F0aW9uLndhdGNoTG9jYXRpb24oXG4gICAgZnVuY3Rpb24gKGxvYykge1xuICAgICAgICBpZiAobG9jKSB7XG4gICAgICAgICAgbGF0ID0gbG9jLmxhdGl0dWRlIFxuICAgICAgICAgIGxvbiA9IGxvYy5sb25naXR1ZGVcbiAgICAgICAgICBhbHQgPSBsb2MuYWx0aXR1ZGVcbiAgICAgICAgICAvLyBjb25zb2xlLmR1bXAoYXJjaGl0ZWN0Vmlldyk7XG4gICAgICAgICAgYXJjaGl0ZWN0Vmlldy5fYW5kcm9pZC5zZXRMb2NhdGlvbihsYXQsIGxvbiwgLjUpO1xuICAgICAgICAgIC8vIGFyY2hpdGVjdFZpZXcuY2FsbEphdmFTY3JpcHQoYGN1c3RvbSgke2xhdH0sICR7bG9ufSwgJHthbHR9KWApO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJSZWNlaXZlZCBsb2NhdGlvbjogXCIgKyBsYXQsIGxvbik7XG4gICAgICAgIH1cbiAgICB9LCBcbiAgICBmdW5jdGlvbihlKXtcbiAgICAgICAgY29uc29sZS5sb2coXCJFcnJvcjogXCIgKyBlLm1lc3NhZ2UpO1xuICAgIH0sIFxuICAgIHtkZXNpcmVkQWNjdXJhY3k6IDEsIHVwZGF0ZURpc3RhbmNlOiAxMCwgbWluaW11bVVwZGF0ZVRpbWUgOiAxMDAwfSk7IC8vIFNob3VsZCB1cGRhdGUgZXZlcnkgMjAgc2Vjb25kcyBhY2NvcmRpbmcgdG8gR29vZ2UgZG9jdW1lbnRhdGlvbi4gTm90IHZlcmlmaWVkLlxuXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gdXJsTG9hZEVycm9yKGV2ZW50RGF0YSkge1xuICBjb25zb2xlLmR1bXAoZXZlbnREYXRhLmVycm9yKTtcbiAgY29uc29sZS5sb2coJ3VybCBmYWlsZWQnKVxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHVybEludm9rZWQoZXZlbnREYXRhKXtcbiAgY29uc29sZS5sb2coJ3VybCBpbnZva2VkJylcbn07XG4gXG5leHBvcnQgZnVuY3Rpb24gcGFzc0xvY2F0aW9uKGRhdGEpIHtcblxufVxuIl19